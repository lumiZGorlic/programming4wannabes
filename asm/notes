

----------------------------------------------------------------------------------------------------
assembly nasm cheat sheet


QWORD DWORD BYTE ...
PTR

leave ret


64  32  16  8  8
rax eax ax [ah al]

same for 'b' 'c' 'd'

rbp rsp
rsi (source), rdi (dest)



-movzx
Copies the contents of the source operand (register or memory location) to the destination operand (register) and zero extends the value

-add rax, rdx ; Addiere Wert von rdx auf rax und Speicher Ergebnis in rax (rax = rax + rdx)
-add    BYTE PTR [rbp-0x1],al <------- can take memory address !!!!

mov

shl shr
rol ror

and or xor

neg add sub mul div

cmp jmp

lea












 5fa:   55                      push   rbp
 5fb:   48 89 e5                mov    rbp,rsp
 5fe:   c6 45 ff 10             mov    BYTE PTR [rbp-0x1],0x10
 602:   0f b6 45 ff             movzx  eax,BYTE PTR [rbp-0x1]
 606:   83 c0 01                add    eax,0x1
 609:   5d                      pop    rbp
 60a:   c3                      ret

 66a:   55                      push   rbp
 66b:   48 89 e5                mov    rbp,rsp
 66e:   48 83 ec 10             sub    rsp,0x10
 672:   c6 45 ff 10             mov    BYTE PTR [rbp-0x1],0x10
 676:   b8 00 00 00 00          mov    eax,0x0
 67b:   e8 0c 00 00 00          call   68c <func2>
 680:   00 45 ff                add    BYTE PTR [rbp-0x1],al
 683:   0f b6 45 ff             movzx  eax,BYTE PTR [rbp-0x1]
 687:   83 c0 01                add    eax,0x1
 68a:   c9                      leave
 68b:   c3                      ret

 67b:   55                      push   rbp
 67c:   48 89 e5                mov    rbp,rsp
 67f:   c7 45 f8 10 00 00 00    mov    DWORD PTR [rbp-0x8],0x10
 686:   c6 45 f7 20             mov    BYTE PTR [rbp-0x9],0x20
 68a:   c7 45 fc 30 00 00 00    mov    DWORD PTR [rbp-0x4],0x30
 691:   0f b6 55 f7             movzx  edx,BYTE PTR [rbp-0x9]
 695:   8b 45 f8                mov    eax,DWORD PTR [rbp-0x8]
 698:   01 c2                   add    edx,eax
 69a:   8b 45 fc                mov    eax,DWORD PTR [rbp-0x4]
 69d:   01 d0                   add    eax,edx
 69f:   5d                      pop    rbp
 6a0:   c3                      ret

00000000000006a1 <func3>:
 6a1:   55                      push   rbp
 6a2:   48 89 e5                mov    rbp,rsp
 6a5:   48 81 ec 90 00 00 00    sub    rsp,0x90
 6ac:   89 bd 7c ff ff ff       mov    DWORD PTR [rbp-0x84],edi
 6b2:   89 b5 78 ff ff ff       mov    DWORD PTR [rbp-0x88],esi
 6b8:   64 48 8b 04 25 28 00    mov    rax,QWORD PTR fs:0x28
 6bf:   00 00
 6c1:   48 89 45 f8             mov    QWORD PTR [rbp-0x8],rax
 6c5:   31 c0                   xor    eax,eax
 6c7:   90                      nop
 6c8:   48 8b 45 f8             mov    rax,QWORD PTR [rbp-0x8]
 6cc:   64 48 33 04 25 28 00    xor    rax,QWORD PTR fs:0x28
 6d3:   00 00
 6d5:   74 05                   je     6dc <func3+0x3b>
 6d7:   e8 64 fe ff ff          call   540 <__stack_chk_fail@plt>
 6dc:   c9                      leave
 6dd:   c3                      ret

0000000000006fa <func>:
 6fa:   55                      push   rbp
 6fb:   48 89 e5                mov    rbp,rsp
 6fe:   48 83 ec 70             sub    rsp,0x70
 702:   48 89 7d 98             mov    QWORD PTR [rbp-0x68],rdi
 706:   64 48 8b 04 25 28 00    mov    rax,QWORD PTR fs:0x28
 70d:   00 00
 70f:   48 89 45 f8             mov    QWORD PTR [rbp-0x8],rax
(...)
 7e3:   48 8b 45 f8             mov    rax,QWORD PTR [rbp-0x8]
 7e7:   64 48 33 04 25 28 00    xor    rax,QWORD PTR fs:0x28
 7ee:   00 00
 7f0:   74 05                   je     7f7 <func+0xfd>
 7f2:   e8 c9 fd ff ff          call   5c0 <__stack_chk_fail@plt>
 7f7:   c9                      leave
 7f8:   c3                      ret












